import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Camera {
    private int id;
    private String name;
    private String model;
    private double rentalAmount;
    private boolean available;

    public Camera(int id, String name, String model, double rentalAmount) {
        this.id = id;
        this.name = name;
        this.model = model;
        this.rentalAmount = rentalAmount;
        this.available = true;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getModel() {
        return model;
    }

    public double getRentalAmount() {
        return rentalAmount;
    }

    public boolean isAvailable() {
        return available;
    }

    public void setAvailable(boolean available) {
        this.available = available;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Model: " + model + ", Price per day: $" + rentalAmount +
                ", Status: " + (available ? "Available" : "Not Available");
    }
}

class Wallet {
    private double balance;

    public Wallet(double balance) {
        this.balance = balance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
    }
}

class RentalApplication {
    private List<Camera> cameraList;
    private List<Camera> userCameraList;
    private Wallet userWallet;

    public RentalApplication() {
        cameraList = new ArrayList<>();
        userCameraList = new ArrayList<>();
        userWallet = new Wallet(0.0);
    }

    public void addCamera(Camera camera) {
        cameraList.add(camera);
    }

    public void addUserCamera(Camera camera) {
        userCameraList.add(camera);
    }

    public void removeUserCamera(int cameraId) {
        for (int i = 0; i < userCameraList.size(); i++) {
            Camera camera = userCameraList.get(i);
            if (camera.getId() == cameraId) {
                userCameraList.remove(i);
                System.out.println("Camera removed: " + camera);
                return;
            }
        }
        System.out.println("Invalid camera ID.");
    }

    public void displayCameraList() {
        if (cameraList.isEmpty()) {
            System.out.println("No Data Present at This Moment.");
        } else {
            System.out.println("Available Cameras for Rent:");
            for (Camera camera : cameraList) {
                System.out.println(camera);
            }
        }
    }

    public void displayUserCameraList() {
        if (userCameraList.isEmpty()) {
            System.out.println("You don't have any cameras.");
        } else {
            System.out.println("Your Cameras:");
            for (Camera camera : userCameraList) {
                System.out.println(camera);
            }
        }
    }

    public void rentCamera(int cameraId) {
        for (Camera camera : cameraList) {
            if (camera.getId() == cameraId && camera.isAvailable()) {
                double rentalAmount = camera.getRentalAmount();

                if (userWallet.getBalance() >= rentalAmount) {
                    userWallet.deposit(-rentalAmount);
                    addUserCamera(camera);
                    camera.setAvailable(false);
                    System.out.println("Camera rented successfully! Amount deducted from wallet: $" + rentalAmount);
                } else {
                    System.out.println("Insufficient wallet balance. Cannot rent the camera.");
                }

                return;
            }
        }

        System.out.println("Invalid camera ID or camera is not available for rent.");
    }

    public void displayWalletBalance() {
        System.out.println("Wallet Balance: $" + userWallet.getBalance());
    }

    public void depositToWallet() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the amount to deposit: $");
        double amount = scanner.nextDouble();
        scanner.nextLine(); // Consume the newline character

        System.out.print("Do you want to add $" + amount + " to your wallet? (yes/no): ");
        String confirmation = scanner.nextLine().toLowerCase();

        if (confirmation.equals("yes")) {
            userWallet.deposit(amount);
            System.out.println("Amount deposited successfully! New wallet balance: $" + userWallet.getBalance());
        } else {
            System.out.println("No amount added to the wallet.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        RentalApplication rentalApp = new RentalApplication();
        Scanner scanner = new Scanner(System.in);

        // Adding sample cameras for demonstration
        rentalApp.addCamera(new Camera(1, "Canon", "EOS R", 20.0));
        rentalApp.addCamera(new Camera(2, "Nikon", "D850", 25.0));
        rentalApp.addCamera(new Camera(3, "Sony", "A7 III", 30.0));

        // ... Existing login code ...

        // If logged in, display the menu
        if (isLoggedIn) {
            boolean isRunning = true;
            while (isRunning) {
                System.out.println("\n===== RentMyCam.io =====");
                System.out.println("1. Display Camera List");
                System.out.println("2. Rent a Camera");
                System.out.println("3. View Wallet Balance");
                System.out.println("4. Deposit to Wallet");
                System.out.println("5. View My Cameras");
                System.out.println("6. Add Camera");
                System.out.println("7. Remove Camera");
                System.out.println("8. Exit");
                System.out.print("Enter your choice: ");
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume the newline character
                System.out.println();

                switch (choice) {
                    case 1:
                        rentalApp.displayCameraList();
                        break;
                    case 2:
                        System.out.print("Enter the camera ID to rent: ");
                        int cameraId = scanner.nextInt();
                        rentalApp.rentCamera(cameraId);
                        scanner.nextLine(); // Consume the newline character
                        break;
                    case 3:
                        rentalApp.displayWalletBalance();
                        break;
                    case 4:
                        rentalApp.depositToWallet();
                        break;
                    case 5:
                        boolean isViewingCameras = true;
                        while (isViewingCameras) {
                            System.out.println("\n===== My Cameras =====");
                            System.out.println("1. Add Camera");
                            System.out.println("2. Remove Camera");
                            System.out.println("3. View My Cameras");
                            System.out.println("4. Go to Previous Menu");
                            System.out.print("Enter your choice: ");
                            int subChoice = scanner.nextInt();
                            scanner.nextLine(); // Consume the newline character
                            System.out.println();

                            switch (subChoice) {
                                case 1:
                                    System.out.print("Enter the camera ID: ");
                                    int id = scanner.nextInt();
                                    scanner.nextLine(); // Consume the newline character
                                    System.out.print("Enter the camera name: ");
                                    String name = scanner.nextLine();
                                    System.out.print("Enter the camera model: ");
                                    String model = scanner.nextLine();
                                    System.out.print("Enter the rental amount per day: ");
                                    double rentalAmount = scanner.nextDouble();
                                    scanner.nextLine(); // Consume the newline character
                                    rentalApp.addUserCamera(new Camera(id, name, model, rentalAmount));
                                    System.out.println("Camera added successfully!");
                                    break;
                                case 2:
                                    System.out.print("Enter the camera ID to remove: ");
                                    int removeCameraId = scanner.nextInt();
                                    scanner.nextLine(); // Consume the newline character
                                    rentalApp.removeUserCamera(removeCameraId);
                                    break;
                                case 3:
                                    rentalApp.displayUserCameraList();
                                    break;
                                case 4:
                                    isViewingCameras = false;
                                    break;
                                default:
                                    System.out.println("Invalid choice. Please try again.");
                                    break;
                            }
                        }
                        break;
                    case 6:
                        System.out.print("Enter the camera ID: ");
                        int id = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character
                        System.out.print("Enter the camera name: ");
                        String name = scanner.nextLine();
                        System.out.print("Enter the camera model: ");
                        String model = scanner.nextLine();
                        System.out.print("Enter the rental amount per day: ");
                        double rentalAmount = scanner.nextDouble();
                        scanner.nextLine(); // Consume the newline character
                        rentalApp.addUserCamera(new Camera(id, name, model, rentalAmount));
                        System.out.println("Camera added successfully!");
                        break;
                    case 7:
                        System.out.print("Enter the camera ID to remove: ");
                        int removeCameraId = scanner.nextInt();
                        scanner.nextLine(); // Consume the newline character
                        rentalApp.removeUserCamera(removeCameraId);
                        break;
                    case 8:
                        isRunning = false;
                        System.out.println("Closing the application...");
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                        break;
                }
            }
        }

        scanner.close();
    }
}
